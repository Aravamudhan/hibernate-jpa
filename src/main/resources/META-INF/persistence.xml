<persistence version="2.1"
	xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns:jcp.org/xml/ns/persistence
  http://xmlns.jcp.org/xml/ns/persistence_2_1.xsd">

	<!-- persistence.xml must configure atleast one persistance unit. -->
	<persistence-unit name="HelloWorldPU">

		<!-- database connection -->
		<jta-data-source>dataSourceOne</jta-data-source>

		<class>com.amudhan.jpatest.model.helloworld.Message</class>

		<!-- This setting disables the feature of scanning the class path and automatically 
			adding the entities to the persistence context. -->
		<exclude-unlisted-classes>true</exclude-unlisted-classes>
		<properties>
			<property name="javax.persistence.schema-generation.database.action"
				value="drop-and-create"></property>
		</properties>
	</persistence-unit>
	<persistence-unit name="CustomSchemaPU">
		<jta-data-source>dataSourceOne</jta-data-source>
		<class>com.amudhan.jpatest.model.complexschemas.custom.User</class>
		<class>com.amudhan.jpatest.model.complexschemas.custom.Item</class>
		<class>com.amudhan.jpatest.model.complexschemas.custom.Bid</class>
		<exclude-unlisted-classes>true</exclude-unlisted-classes>
		<properties>
			<property name="hibernate.hbm2ddl.import_files_sql_extractor"
				value="org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor"></property>
			<property name="javax.persistence.schema-generation.create-source"
				value="script-then-metadata" />
			<property name="javax.persistence.schema-generation.drop-source"
				value="metadata-then-script" />
			<property name="javax.persistence.schema-generation.create-script-source"
				value="complexschemas/CreateScript.sql.txt" />
			<property name="javax.persistence.schema-generation.drop-script-source"
				value="complexschemas/DropScript.sql.txt" />
			<!-- This load script adds constraint -->
			<property name="javax.persistence.sql-load-script-source"
				value="complexschemas/LoadScript.sql.txt" />
		</properties>
	</persistence-unit>
	<persistence-unit name="NaturalPrimaryKeyPU">
		<jta-data-source>dataSourceOne</jta-data-source>
		<class>com.amudhan.jpatest.model.complexschemas.naturalprimarykey.User
		</class>
		<exclude-unlisted-classes>true</exclude-unlisted-classes>
	</persistence-unit>
	<persistence-unit name="CompositeKeyEmbeddedId">
		<jta-data-source>dataSourceOne</jta-data-source>
		<class>com.amudhan.jpatest.model.complexschemas.compositekey.embedded.User
		</class>
		<exclude-unlisted-classes>true</exclude-unlisted-classes>
	</persistence-unit>
	<persistence-unit name="CompositeKeyMapsId">
		<jta-data-source>dataSourceOne</jta-data-source>
		<class>com.amudhan.jpatest.model.complexschemas.compositekey.mapsid.User</class>
		<class>com.amudhan.jpatest.model.complexschemas.compositekey.mapsid.Department</class>
		<exclude-unlisted-classes>true</exclude-unlisted-classes>
	</persistence-unit>
	<persistence-unit name="CompositeKeyReadOnly">
		<jta-data-source>dataSourceOne</jta-data-source>
		<class>com.amudhan.jpatest.model.complexschemas.compositekey.readonly.User</class>
		<class>com.amudhan.jpatest.model.complexschemas.compositekey.readonly.Department</class>
	</persistence-unit>
	<persistence-unit name="CompositeKeyManyToOne">
		<jta-data-source>dataSourceOne</jta-data-source>
		<class>com.amudhan.jpatest.model.complexschemas.compositekey.manytoone.User</class>
		<class>com.amudhan.jpatest.model.complexschemas.compositekey.manytoone.Item</class>
	</persistence-unit>
	<persistence-unit name="NaturalForeignKeyPU">
		<jta-data-source>dataSourceOne</jta-data-source>
		<class>com.amudhan.jpatest.model.complexschemas.naturalforeignkey.User</class>
		<class>com.amudhan.jpatest.model.complexschemas.naturalforeignkey.Item</class>
	</persistence-unit>
	<persistence-unit name="SecondaryTablePU">
		<jta-data-source>dataSourceOne</jta-data-source>
		<class>com.amudhan.jpatest.model.complexschemas.secondarytable.User</class>
	</persistence-unit>
	<persistence-unit name="SimplePU">
	 	<jta-data-source>dataSourceOne</jta-data-source>
	 	<class>com.amudhan.jpatest.model.simple.Address</class>
	 	<class>com.amudhan.jpatest.model.simple.Bid</class>
	 	<class>com.amudhan.jpatest.model.simple.Category</class>
	 	<class>com.amudhan.jpatest.model.simple.Item</class>
	 	<class>com.amudhan.jpatest.model.simple.User</class>
	 	<properties>
	 	<!--With the use_identifier_rollback set to true, if remove is called on an entity,
	 	 	the identifier is reset. null for Long, 0 for long.
	 	 	The entity becomes totally transient. If this is not set,
	 	 	the entity will still hold its identifier value. -->
	 		<!-- <property name="hibernate.use_identifier_rollback" value="true"/> -->
	 	</properties>
	</persistence-unit>
	<persistence-unit name="FetchingReadOnly">
		<jta-data-source>dataSourceOne</jta-data-source>
		<class>com.amudhan.jpatest.model.fetching.readonly.User</class>
		<class>com.amudhan.jpatest.model.fetching.readonly.Item</class>
		<class>com.amudhan.jpatest.model.fetching.readonly.Bid</class>
	</persistence-unit>
	<persistence-unit name="ConcurrencyVersioningPU">
		<jta-data-source>dataSourceOne</jta-data-source>
		<class>com.amudhan.jpatest.model.concurrency.version.Item</class>
		<class>com.amudhan.jpatest.model.concurrency.version.Category</class>
		<class>com.amudhan.jpatest.model.concurrency.version.Bid</class>
	</persistence-unit>
	<persistence-unit name="ConcurrencyVersioningTimestampPU">
		<jta-data-source>dataSourceOne</jta-data-source>
		<class>com.amudhan.jpatest.model.concurrency.versiontimestamp.Item</class>
	</persistence-unit>
	<persistence-unit name="ConcurrencyVersioningAllPU">
		<jta-data-source>dataSourceOne</jta-data-source>
		<class>com.amudhan.jpatest.model.concurrency.versionall.Item</class>
	</persistence-unit>
</persistence>